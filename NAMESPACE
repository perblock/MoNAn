# functions to be exported
export(
  
  # core functions
  createAlgorithm, createEdgelist, createEffectsObject, createNetwork, 
  createNodeSet, createNodeVariable, createProcessState, createWeightedCache,
  estimateMobilityNetwork, estimateDistributionNetwork, 
  simulateMobilityNetworks, simulateDistributionNetworks,
  
  # auxiliary functions
  autoCorrelationTest, extractTraces, 
  getMultinomialStatistics, gofDistributionNetwork, plot.gof.stats.monan, 
  plot.traces.monan, print.result.monan, print.scoretest.monan, scoreTest,
  
  # effect functions
  alter_covariate, crowding_out_by_resource_inflow, 
  crowding_out_prop_covar_bin, dyadic_covariate,
  dyadic_covariate_resource_attribute, dyadic_covariate_tie_weights_sigmoid,
  in_proportion_exponent_covar_bin, in_ties_loops, in_weights_exponent, 
  in_weights_exponent_covar, loops, loops_GW, loops_node_covar, 
  loops_resource_covar_node_covar, loops_resource_covar, loops_sigmoid, 
  loops_GW_prop, min_reciprocity, min_reciprocity_resource_covar, min_transitivity,
  netflow_transitivity, present_relations, resource_covar_to_node_covar, 
  same_covariate, sim_covariate, staying_by_prop_bin_inflow, 
  staying_by_resource_inflow, tie_weights_exponent, tie_weights_sigmoid,
  
  # gof param functions
  getIndegree, getTieWeights
)

importFrom("graphics", "boxplot", "lines")
importFrom("stats", "as.formula", "ecdf", "pnorm", "runif", "sd")
importFrom("methods", "is")
importFrom("snowfall", "sfInit", "sfExport", "sfLapply", "sfLibrary", "sfStop")

# S3 methods
S3method(print, result.monan)
S3method(plot, traces.monan)
S3method(plot, gof.stats.monan)
S3method(print, scoretest.monan)
